/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace IRewardDistributor {
  export type RecipientStruct = {
    recipient: PromiseOrValue<string>;
    bips: PromiseOrValue<BigNumberish>;
    wrap: PromiseOrValue<boolean>;
  };

  export type RecipientStructOutput = [string, BigNumber, boolean] & {
    recipient: string;
    bips: BigNumber;
    wrap: boolean;
  };
}

export interface RewardDistributorInterface extends utils.Interface {
  functions: {
    "destroy()": FunctionFragment;
    "owner()": FunctionFragment;
    "provider()": FunctionFragment;
    "recipients(uint256)": FunctionFragment;
    "recipientsAll()": FunctionFragment;
    "recipientsCount()": FunctionFragment;
    "replaceOwner(address)": FunctionFragment;
    "replaceRecipients(address[],uint256[],bool[])": FunctionFragment;
    "replaceReserveBalance(uint256)": FunctionFragment;
    "reserveBalance()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "destroy"
      | "owner"
      | "provider"
      | "recipients"
      | "recipientsAll"
      | "recipientsCount"
      | "replaceOwner"
      | "replaceRecipients"
      | "replaceReserveBalance"
      | "reserveBalance"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "destroy", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "provider", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "recipients",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "recipientsAll",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "recipientsCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "replaceOwner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "replaceRecipients",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<boolean>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "replaceReserveBalance",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "reserveBalance",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "destroy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "provider", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "recipients", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recipientsAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recipientsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "replaceOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "replaceRecipients",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "replaceReserveBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reserveBalance",
    data: BytesLike
  ): Result;

  events: {
    "Refill(uint256)": EventFragment;
    "Reward(address,uint256)": EventFragment;
    "TotalRewards(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Refill"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Reward"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TotalRewards"): EventFragment;
}

export interface RefillEventObject {
  amount: BigNumber;
}
export type RefillEvent = TypedEvent<[BigNumber], RefillEventObject>;

export type RefillEventFilter = TypedEventFilter<RefillEvent>;

export interface RewardEventObject {
  recipient: string;
  amount: BigNumber;
}
export type RewardEvent = TypedEvent<[string, BigNumber], RewardEventObject>;

export type RewardEventFilter = TypedEventFilter<RewardEvent>;

export interface TotalRewardsEventObject {
  timestamp: BigNumber;
  amount: BigNumber;
}
export type TotalRewardsEvent = TypedEvent<
  [BigNumber, BigNumber],
  TotalRewardsEventObject
>;

export type TotalRewardsEventFilter = TypedEventFilter<TotalRewardsEvent>;

export interface RewardDistributor extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RewardDistributorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    destroy(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    provider(overrides?: CallOverrides): Promise<[string]>;

    recipients(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, boolean] & {
        recipient: string;
        bips: BigNumber;
        wrap: boolean;
      }
    >;

    recipientsAll(
      overrides?: CallOverrides
    ): Promise<[IRewardDistributor.RecipientStructOutput[]]>;

    recipientsCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    replaceOwner(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    replaceRecipients(
      _recipients: PromiseOrValue<string>[],
      _bips: PromiseOrValue<BigNumberish>[],
      _wrap: PromiseOrValue<boolean>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    replaceReserveBalance(
      _reserveBalance: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    reserveBalance(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  destroy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  recipients(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, boolean] & {
      recipient: string;
      bips: BigNumber;
      wrap: boolean;
    }
  >;

  recipientsAll(
    overrides?: CallOverrides
  ): Promise<IRewardDistributor.RecipientStructOutput[]>;

  recipientsCount(overrides?: CallOverrides): Promise<BigNumber>;

  replaceOwner(
    _owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  replaceRecipients(
    _recipients: PromiseOrValue<string>[],
    _bips: PromiseOrValue<BigNumberish>[],
    _wrap: PromiseOrValue<boolean>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  replaceReserveBalance(
    _reserveBalance: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  reserveBalance(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    destroy(overrides?: CallOverrides): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    provider(overrides?: CallOverrides): Promise<string>;

    recipients(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, boolean] & {
        recipient: string;
        bips: BigNumber;
        wrap: boolean;
      }
    >;

    recipientsAll(
      overrides?: CallOverrides
    ): Promise<IRewardDistributor.RecipientStructOutput[]>;

    recipientsCount(overrides?: CallOverrides): Promise<BigNumber>;

    replaceOwner(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    replaceRecipients(
      _recipients: PromiseOrValue<string>[],
      _bips: PromiseOrValue<BigNumberish>[],
      _wrap: PromiseOrValue<boolean>[],
      overrides?: CallOverrides
    ): Promise<void>;

    replaceReserveBalance(
      _reserveBalance: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    reserveBalance(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "Refill(uint256)"(amount?: null): RefillEventFilter;
    Refill(amount?: null): RefillEventFilter;

    "Reward(address,uint256)"(
      recipient?: PromiseOrValue<string> | null,
      amount?: null
    ): RewardEventFilter;
    Reward(
      recipient?: PromiseOrValue<string> | null,
      amount?: null
    ): RewardEventFilter;

    "TotalRewards(uint256,uint256)"(
      timestamp?: null,
      amount?: null
    ): TotalRewardsEventFilter;
    TotalRewards(timestamp?: null, amount?: null): TotalRewardsEventFilter;
  };

  estimateGas: {
    destroy(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    provider(overrides?: CallOverrides): Promise<BigNumber>;

    recipients(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    recipientsAll(overrides?: CallOverrides): Promise<BigNumber>;

    recipientsCount(overrides?: CallOverrides): Promise<BigNumber>;

    replaceOwner(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    replaceRecipients(
      _recipients: PromiseOrValue<string>[],
      _bips: PromiseOrValue<BigNumberish>[],
      _wrap: PromiseOrValue<boolean>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    replaceReserveBalance(
      _reserveBalance: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    reserveBalance(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    destroy(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    provider(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    recipients(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    recipientsAll(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    recipientsCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    replaceOwner(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    replaceRecipients(
      _recipients: PromiseOrValue<string>[],
      _bips: PromiseOrValue<BigNumberish>[],
      _wrap: PromiseOrValue<boolean>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    replaceReserveBalance(
      _reserveBalance: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    reserveBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
